In order to get through the barriers.
As a customer
I need to touch in and out.

Write up a plan for how you will interact with your code and manually test in IRB.
card = Oystercard.new
card.top_up(10)
card.touch_in --> signify it's in a journey ---> change in_journey attr - true
expect(card.touch_in).to eq
card.touch_out --> signify out of journey  ---> change in_journey to false
card.in_journey? --> return that it's in journey --> this just returns whether it's  in journey or not

Write tests for in_journey?, touch_in and touch_out
Write implementation of these methods that will make the tests pass
Use an instance variable to track whether the card is in use
Use an RSpec predicate matcher to check if the card is in use
Use boolean values to store the state of the card

touch_in
touch_out
in_journey

Write up a plan for how you will interact with your code and manually test in IRB
card = Oystercard.new
card.top_up(5)
card.touch_in(entry_station)
@entry_station = entry_station
card.entry_station = Waterloo
Using a double, write a test that expects the card to remember the entry station after the touch in
Update the touch_in method to accept the entry station
Update existing tests to pass a station to the touch_in method - you may need to declare your double in a let statement at the top of your describe block
Expose entry_station instance variable using an attribute reader
Make the card forget the entry station on touch out by setting it to nil
When your tests are all green, 
refactor to remove the in_journey variable. 
Rewrite the in_journey? method to infer its 
status based on whether or not there is an entry station